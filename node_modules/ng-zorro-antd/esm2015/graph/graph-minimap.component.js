/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectionStrategy, Component, ElementRef } from '@angular/core';
import { Minimap } from './core/minimap';
export class NzGraphMinimapComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    ngOnDestroy() {
        var _a;
        (_a = this.minimap) === null || _a === void 0 ? void 0 : _a.destroy();
    }
    init(containerEle, zoomBehavior) {
        const svgEle = containerEle.nativeElement.querySelector('svg');
        const zoomEle = containerEle.nativeElement.querySelector('svg > g');
        this.minimap = new Minimap(svgEle, zoomEle, zoomBehavior, this.elementRef.nativeElement, 150, 0);
    }
    zoom(transform) {
        var _a;
        (_a = this.minimap) === null || _a === void 0 ? void 0 : _a.zoom(transform);
    }
    update() {
        var _a;
        (_a = this.minimap) === null || _a === void 0 ? void 0 : _a.update();
    }
}
NzGraphMinimapComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-graph-minimap',
                template: `
    <svg>
      <defs>
        <filter id="minimapDropShadow" x="-20%" y="-20%" width="150%" height="150%">
          <feOffset result="offOut" in="SourceGraphic" dx="1" dy="1"></feOffset>
          <feColorMatrix
            result="matrixOut"
            in="offOut"
            type="matrix"
            values="0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.1 0 0 0 0 0 0.5 0"
          ></feColorMatrix>
          <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="2"></feGaussianBlur>
          <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>
        </filter>
      </defs>
      <rect></rect>
    </svg>
    <canvas class="viewport"></canvas>
    <!-- Additional canvas to use as buffer to avoid flickering between updates -->
    <canvas class="buffer"></canvas>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    '[class.nz-graph-minimap]': 'true'
                }
            },] }
];
NzGraphMinimapComponent.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGgtbWluaW1hcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9jb21wb25lbnRzL2dyYXBoL2dyYXBoLW1pbmltYXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBTTFGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQStCekMsTUFBTSxPQUFPLHVCQUF1QjtJQUVsQyxZQUFvQixVQUFtQztRQUFuQyxlQUFVLEdBQVYsVUFBVSxDQUF5QjtJQUFHLENBQUM7SUFFM0QsV0FBVzs7UUFDVCxNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLENBQUMsWUFBd0IsRUFBRSxZQUFnRDtRQUM3RSxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvRCxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBRUQsSUFBSSxDQUFDLFNBQTBCOztRQUM3QixNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTTs7UUFDSixNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3pCLENBQUM7OztZQWhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9CVDtnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsSUFBSSxFQUFFO29CQUNKLDBCQUEwQixFQUFFLE1BQU07aUJBQ25DO2FBQ0Y7OztZQXBDNEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBab29tQmVoYXZpb3IgfSBmcm9tICdkMy16b29tJztcblxuaW1wb3J0IHsgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcblxuaW1wb3J0IHsgTWluaW1hcCB9IGZyb20gJy4vY29yZS9taW5pbWFwJztcbmltcG9ydCB7IE56Wm9vbVRyYW5zZm9ybSB9IGZyb20gJy4vaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbnotZ3JhcGgtbWluaW1hcCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHN2Zz5cbiAgICAgIDxkZWZzPlxuICAgICAgICA8ZmlsdGVyIGlkPVwibWluaW1hcERyb3BTaGFkb3dcIiB4PVwiLTIwJVwiIHk9XCItMjAlXCIgd2lkdGg9XCIxNTAlXCIgaGVpZ2h0PVwiMTUwJVwiPlxuICAgICAgICAgIDxmZU9mZnNldCByZXN1bHQ9XCJvZmZPdXRcIiBpbj1cIlNvdXJjZUdyYXBoaWNcIiBkeD1cIjFcIiBkeT1cIjFcIj48L2ZlT2Zmc2V0PlxuICAgICAgICAgIDxmZUNvbG9yTWF0cml4XG4gICAgICAgICAgICByZXN1bHQ9XCJtYXRyaXhPdXRcIlxuICAgICAgICAgICAgaW49XCJvZmZPdXRcIlxuICAgICAgICAgICAgdHlwZT1cIm1hdHJpeFwiXG4gICAgICAgICAgICB2YWx1ZXM9XCIwLjEgMCAwIDAgMCAwIDAuMSAwIDAgMCAwIDAgMC4xIDAgMCAwIDAgMCAwLjUgMFwiXG4gICAgICAgICAgPjwvZmVDb2xvck1hdHJpeD5cbiAgICAgICAgICA8ZmVHYXVzc2lhbkJsdXIgcmVzdWx0PVwiYmx1ck91dFwiIGluPVwibWF0cml4T3V0XCIgc3RkRGV2aWF0aW9uPVwiMlwiPjwvZmVHYXVzc2lhbkJsdXI+XG4gICAgICAgICAgPGZlQmxlbmQgaW49XCJTb3VyY2VHcmFwaGljXCIgaW4yPVwiYmx1ck91dFwiIG1vZGU9XCJub3JtYWxcIj48L2ZlQmxlbmQ+XG4gICAgICAgIDwvZmlsdGVyPlxuICAgICAgPC9kZWZzPlxuICAgICAgPHJlY3Q+PC9yZWN0PlxuICAgIDwvc3ZnPlxuICAgIDxjYW52YXMgY2xhc3M9XCJ2aWV3cG9ydFwiPjwvY2FudmFzPlxuICAgIDwhLS0gQWRkaXRpb25hbCBjYW52YXMgdG8gdXNlIGFzIGJ1ZmZlciB0byBhdm9pZCBmbGlja2VyaW5nIGJldHdlZW4gdXBkYXRlcyAtLT5cbiAgICA8Y2FudmFzIGNsYXNzPVwiYnVmZmVyXCI+PC9jYW52YXM+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5uei1ncmFwaC1taW5pbWFwXSc6ICd0cnVlJ1xuICB9XG59KVxuZXhwb3J0IGNsYXNzIE56R3JhcGhNaW5pbWFwQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgbWluaW1hcD86IE1pbmltYXA7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pIHt9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5taW5pbWFwPy5kZXN0cm95KCk7XG4gIH1cblxuICBpbml0KGNvbnRhaW5lckVsZTogRWxlbWVudFJlZiwgem9vbUJlaGF2aW9yOiBab29tQmVoYXZpb3I8TnpTYWZlQW55LCBOelNhZmVBbnk+KTogdm9pZCB7XG4gICAgY29uc3Qgc3ZnRWxlID0gY29udGFpbmVyRWxlLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcignc3ZnJyk7XG4gICAgY29uc3Qgem9vbUVsZSA9IGNvbnRhaW5lckVsZS5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2ZyA+IGcnKTtcbiAgICB0aGlzLm1pbmltYXAgPSBuZXcgTWluaW1hcChzdmdFbGUsIHpvb21FbGUsIHpvb21CZWhhdmlvciwgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIDE1MCwgMCk7XG4gIH1cblxuICB6b29tKHRyYW5zZm9ybTogTnpab29tVHJhbnNmb3JtKTogdm9pZCB7XG4gICAgdGhpcy5taW5pbWFwPy56b29tKHRyYW5zZm9ybSk7XG4gIH1cblxuICB1cGRhdGUoKTogdm9pZCB7XG4gICAgdGhpcy5taW5pbWFwPy51cGRhdGUoKTtcbiAgfVxufVxuIl19